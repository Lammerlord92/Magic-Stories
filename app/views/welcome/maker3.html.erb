<html style="height:100%;">
<head>
  <title>UIConfig example</title>

  <!-- Sets the basepath for the library if not in same directory
  <script type="text/javascript">
    mxBasePath = '../src';
  </script>-->

  <!-- Loads and initializes the library -->
  <script type="text/javascript" src="http://jgraph.github.io/mxgraph/javascript/src/js/mxClient.js"></script>

  <!-- Example code -->
  <script type="text/javascript">

    // Program starts here. Creates a sample graph in the
    // DOM node with the specified ID. This function is invoked
    // from the onLoad event handler of the document (see below).
    function main()
    {
      // Checks if the browser is supported
      if (!mxClient.isBrowserSupported())
      {
        // Displays an error message if the browser is not supported.
        mxUtils.error('Browser is not supported!', 200, false);
      }
      else
      {
        // Creates the graph inside the given container. The
        // editor is used to create certain functionality for the
        // graph, such as the rubberband selection, but most parts
        // of the UI are custom in this example.
        var editor = new mxEditor();

        // Configures the editor's UI, the toolbar and the popupmenu.
        // Note that the element with the id toolbox is used in the
        // config file, the toolbar element (top element) is used below
        // to create a second toolbar programmatically.
        // The cells to be created via drag and drop are added
        // in the templates array in mxEditor, and a custom action is
        // added to the built-in actions in the editor, as well.
        // The ui section maps the existing DOM elements to the graph
        // and toolbar objects, respectively.
        // Keep in mind that the as-attributes of the add-items in the
        // toolbar and popupmenu sections refer to keys in mxResources.
        var config = mxUtils.load('uiconfig.xml').getDocumentElement();
        editor.configure(config);

        // Enables new connections in the graph
        editor.graph.setConnectable(true);

      }
    }
  </script>
</head>

<!-- Page passes the container for the graph to the program -->
<body onload="main();" style="margin:0px;height:100%; width: auto;">
<table width="100%" height="100%" border="0" cellspacing="0" cellpadding="0">
  <tr>
    <td id="toolbox" valign="top" width="70px" style="min-width:70px;background:#7F7F7F;padding:12px;">
      <img src="http://etc.usf.edu/clipart/40600/40690/pb_sq_40690_lg.gif" width="70px" height="70px"><br/>
      <img src="http://2.bp.blogspot.com/-MZAjo7HkgNE/TqUZQPShXQI/AAAAAAAAB9c/c5Xy3HBhk_g/s1600/GlobeCircle+copy.png" width="70px" height="70px"><br/>
    </td>
    <td width="100%" style="background:url('http://etc.usf.edu/presentations/backgrounds/grid/grid_03/1201m.gif');border: solid gray 1px;height:700px;">
      <div id="graph" style="overflow:auto;width:100%;height:100%;">
      </div>
    </td>
  </tr>
</table>
</body>
</html>