<!doctype html>
<html xmlns="http://www.w3.org/1999/html">
<head>
  <title>Network | Manipulation</title>

  <style type="text/css">
    body, select {
      font: 10pt sans;
    }
    #mynetwork {
      position:relative;
      width: 800px;
      height: 600px;
      border: 1px solid lightgray;
    }
    table.legend_table {
      font-size: 11px;
      border-width:1px;
      border-color:#d3d3d3;
      border-style:solid;
    }
    table.legend_table,td {
      border-width:1px;
      border-color:#d3d3d3;
      border-style:solid;
      padding: 2px;
    }
    div.table_content {
      width:80px;
      text-align:center;
    }
    div.table_description {
      width:100px;
    }

    #operation {
      font-size:28px;
    }
    #network-popUp {
      display:none;
      position:absolute;
      z-index:299;
      background-color: #f9f9f9;
      border-style:solid;
      border-width:3px;
      border-color: #5394ed;
      padding:10px;
      text-align: center;
    }
    #network-popUpEdge {
      display:none;
      position:absolute;
      z-index:299;
      background-color: #f9f9f9;
      border-style:solid;
      border-width:3px;
      border-color: #5394ed;
      padding:10px;
      text-align: center;
    }
  </style>


</head>
<script type="text/javascript">
  var nodes = null;
  var edges = null;
  var network = null;
  nodes = new vis.DataSet();
  edges = new vis.DataSet();
  var data = {
    nodes: nodes,
    edges: edges
  };
  // randomly create some nodes and edges
  var seed = 2;


  function destroy() {
    if (network !== null) {
      network.destroy();
      network = null;
    }
  }

  function draw() {
    destroy();
    nodes = [];
    edges = [];

    // create a network
    var container = document.getElementById('mynetwork');
    var options = {
      layout: {randomSeed:seed}, // just to make sure the layout is the same when the locale is changed
      manipulation: {
        addNode: function (data, callback) {
          // filling in the popup DOM elements
          document.getElementById('operation').innerHTML = "Nuevo capítulo";
          document.getElementById('node-id').value = data.id;
          document.getElementById('node-title').value = data.title;
          document.getElementById('node-text').value = data.text;
          document.getElementById('saveButton').onclick = saveData.bind(this, data, callback);
          document.getElementById('cancelButton').onclick = clearPopUp.bind();
          document.getElementById('network-popUp').style.display = 'block';
        },
        editNode: function (data, callback) {
          // filling in the popup DOM elements
          document.getElementById('operation').innerHTML = "Editar capítulo";
          document.getElementById('node-id').value = data.id;
          document.getElementById('node-title').value = data.title;
          document.getElementById('node-text').value = data.text;
          document.getElementById('saveButton').onclick = saveData.bind(this, data, callback);
          document.getElementById('cancelButton').onclick = cancelEdit.bind(this,callback);
          document.getElementById('network-popUp').style.display = 'block';
        },
        addEdge: function (data, callback) {
          if (data.from == data.to) {
            var r = confirm("¿Quieres conectar el capítulo consigo mismo?");
            if (r == true) {
              data.label='Bucanero';
              document.getElementById('operationEdge').innerHTML = "Editar arista";
              document.getElementById('edge-id').value = data.id;
              document.getElementById('edge-title').value = data.title;
              document.getElementById('edge-text').value = data.text;
              document.getElementById('saveButtonEdge').onclick = saveDataEdge.bind(this, data, callback);
              document.getElementById('cancelButtonEdge').onclick = cancelEditEdge.bind(this,callback);
              document.getElementById('network-popUpEdge').style.display = 'block';
              //TODO Quizá añadir un formulario para editar el nombre de la arista?

            }
          }
          else {
            data.label='Pirata';
            document.getElementById('operationEdge').innerHTML = "Editar arista";
            document.getElementById('edge-id').value = data.id;
            document.getElementById('edge-title').value = data.title;
            document.getElementById('edge-text').value = data.text;
            document.getElementById('saveButtonEdge').onclick = saveDataEdge.bind(this, data, callback);
            document.getElementById('cancelButtonEdge').onclick = cancelEditEdge.bind(this,callback);
            document.getElementById('network-popUpEdge').style.display = 'block';
          }
        }
      }
    };
    network = new vis.Network(container, data, options);
  }

  function clearPopUp() {
    document.getElementById('saveButton').onclick = null;
    document.getElementById('cancelButton').onclick = null;
    document.getElementById('network-popUp').style.display = 'none';
    document.getElementById('node-title').value = '';
    document.getElementById('node-text').value = '';
  }
  function clearPopUpEdge() {
    console.log("ahsdjhasdjkhbasdkj");
    document.getElementById('saveButtonEdge').onclick = null;
    document.getElementById('cancelButtonEdge').onclick = null;
    document.getElementById('network-popUpEdge').style.display = 'none';
    console.log("2");
    document.getElementById('edge-title').value = '';
    document.getElementById('edge-text').value = '';
  }

  function cancelEdit(callback) {
    clearPopUp();
    callback(null);
  }
  function cancelEditEdge(callback) {
    clearPopUpEdge();
    callback(null);
  }
  function saveData(data,callback) {
    data.id = document.getElementById('node-id').value;
    data.label=document.getElementById('node-title').value;
    data.title = document.getElementById('node-title').value;
    data.text = document.getElementById('node-text').value;
    clearPopUp();
    callback(data);
  }
  function saveDataEdge(data,callback) {
    data.id = document.getElementById('edge-id').value;
    data.label=document.getElementById('edge-title').value;
    data.title = document.getElementById('edge-title').value;
    data.text = document.getElementById('edge-text').value;
    clearPopUpEdge();
    callback(data);
  }
 // function updateEdge() {
 //   try {
 //     edges.update({
 //       id: document.getElementById('edge-id').value,
 //       from: document.getElementById('edge-from').value,
//        to: document.getElementById('edge-to').value,
//        text: document.getElementById('edge-text').value
 //     });
 //   }
 //   catch (err) {
 //     alert(err);
 //   }
 // }


</script>
<body onload="draw();">

<div id="network-popUp">
  <span id="operation">chapter</span> <br>
    <input id="node-id" value="new value" hidden />


      Título<input id="node-title" class="form-control" value="" />

      Texto<input id="node-text" value="" class="wysihtml5 form-control"/>
      <script type="text/javascript" charset="utf-8">
        $('#node-text').wysihtml5({'toolbar': { "fa": false ,'blockquote': false, 'html': false, "color": false, "image": false, "lists": false, "link": false}});
      </script>
  <input type="button" value="save" id="saveButton"/>
  <input type="button" value="cancel" id="cancelButton" />
</div>
<div id="network-popUpEdge">
  <span id="operationEdge">chapter</span> <br>
  <input id="edge-id" value="new value" hidden />


  Título<input id="edge-title" class="form-control" value="" />

  Texto<input id="edge-text" value="" class="wysihtml5 form-control"/>
  <script type="text/javascript" charset="utf-8">
    $('#edge-text').wysihtml5({'toolbar': { "fa": false ,'blockquote': false, 'html': false, "color": false, "image": false, "lists": false, "link": false}});
  </script>
  <input type="button" value="save" id="saveButtonEdge"/>
  <input type="button" value="cancel" id="cancelButtonEdge" />
</div>
<br />
<div id="mynetwork"></div>

</body>
</html>