<!doctype html>
<html xmlns="http://www.w3.org/1999/html">
<head>
  <title>Network | Manipulation</title>
  <%= stylesheet_link_tag 'vis' %>
  <style type="text/css">
    body, select {
      font: 10pt sans;
    }
    #mynetwork {
      position:relative;
      width: 800px;
      height: 600px;
      border: 1px solid lightgray;
    }
    table.legend_table {
      font-size: 11px;
      border-width:1px;
      border-color:#d3d3d3;
      border-style:solid;
    }
    table.legend_table,td {
      border-width:1px;
      border-color:#d3d3d3;
      border-style:solid;
      padding: 2px;
    }
    div.table_content {
      width:80px;
      text-align:center;
    }
    div.table_description {
      width:100px;
    }

    #operation {
      font-size:28px;
    }
    #network-popUp {
      display:none;
      position:absolute;
      z-index:299;
      background-color: #f9f9f9;
      border-style:solid;
      border-width:3px;
      border-color: #5394ed;
      padding:10px;
      text-align: center;
    }
    #network-popUpEdge {
      display:none;
      position:absolute;
      z-index:299;
      background-color: #f9f9f9;
      border-style:solid;
      border-width:3px;
      border-color: #5394ed;
      padding:10px;
      text-align: center;
    }
  </style>


</head>
<script type="text/javascript">
  var nodes = null;
  var edges = null;
  var network = null;
  var idInicialGrafo = null;
  nodes = new vis.DataSet();
  edges = new vis.DataSet();
  var data = {
    nodes: nodes,
    edges: edges
  };
  // randomly create some nodes and edges
  var seed = 2;


  function destroy() {
    if (network !== null) {
      network.destroy();
      network = null;
    }
  }

  function draw() {
    destroy();
    nodes = [];
    edges = [];
    deletedNodes = [];
    deletedEdges = [];

    // create a network
    var container = document.getElementById('mynetwork');

    var options = {
      layout: {randomSeed:seed}, // just to make sure the layout is the same when the locale is changed
      interaction: {
        navigationButtons: true
      },
      manipulation: {
        addNode: function (data, callback) {
          document.getElementById('operation').innerHTML = "Nuevo capítulo";
          document.getElementById('node-id').value = data.id;
          document.getElementById('node-title').value = data.title;
          document.getElementById('node-text').value = data.text;
          document.getElementById('saveButton').onclick = saveData.bind(this, data, callback);
          document.getElementById('cancelButton').onclick = clearPopUp.bind();
          document.getElementById('network-popUp').style.display = 'block';
        },
        editNode: function (data, callback) {
          document.getElementById('operation').innerHTML = "Editar capítulo";
          document.getElementById('node-id').value = data.id;
          document.getElementById('node-title').value = data.title;
          document.getElementById('node-text').value = data.text;
          document.getElementById('saveButton').onclick = saveData.bind(this, data, callback);
          document.getElementById('cancelButton').onclick = cancelEdit.bind(this,callback);
          document.getElementById('network-popUp').style.display = 'block';
        },
        addEdge: function (data, callback) {
          if (data.from == data.to) {
            var r = confirm("¿Quieres conectar el capítulo consigo mismo?");

            if (r == true) {
              document.getElementById('operationEdge').innerHTML = "Editar arista";
              document.getElementById('edge-id').value = guid();;
              console.log("data.id = "+document.getElementById('edge-id').value);
              document.getElementById('edge-title').value = data.title;
              document.getElementById('edge-text').value = data.text;
              document.getElementById('saveButtonEdge').onclick = saveDataEdge.bind(this, data, callback);
              document.getElementById('cancelButtonEdge').onclick = cancelEditEdge.bind(this,callback);
              document.getElementById('network-popUpEdge').style.display = 'block';
              //TODO Quizá añadir un formulario para editar el nombre de la arista?

            }
          }
          else {
            document.getElementById('operationEdge').innerHTML = "Editar arista";
            document.getElementById('edge-id').value = guid();;
            console.log("data.id = "+document.getElementById('edge-id').value);
            document.getElementById('edge-title').value = data.title;
            document.getElementById('edge-text').value = data.text;
            document.getElementById('saveButtonEdge').onclick = saveDataEdge.bind(this, data, callback);
            document.getElementById('cancelButtonEdge').onclick = cancelEditEdge.bind(this,callback);
            document.getElementById('network-popUpEdge').style.display = 'block';
          }
        }
      }
    };
    network = new vis.Network(container, data, options);
  }

  function clearPopUp() {
    document.getElementById('saveButton').onclick = null;
    document.getElementById('cancelButton').onclick = null;
    document.getElementById('network-popUp').style.display = 'none';
    document.getElementById('node-title').value = '';
    document.getElementById('node-text').value = '';
  }
  function clearPopUpEdge() {
    document.getElementById('saveButtonEdge').onclick = null;
    document.getElementById('cancelButtonEdge').onclick = null;
    document.getElementById('network-popUpEdge').style.display = 'none';
    document.getElementById('edge-title').value = '';
    document.getElementById('edge-text').value = '';
  }

  function cancelEdit(callback) {
    clearPopUp();
    callback(null);
  }
  function cancelEditEdge(callback) {
    clearPopUpEdge();
    callback(null);
  }
  function saveData(data,callback) {
    var elNodoExiste = false;
    var nodesAux=[];
    for (aux=0;aux<nodes.length;aux++){
      var auxNode = nodes[aux].id;
      if(auxNode==data.id){
        elNodoExiste = true;
      }
      else{
        nodesAux.push(nodes[aux]);
      }
    }
    if (elNodoExiste == true){
      nodes = nodesAux;
    }

    if(nodes.length == 0){
      idInicialGrafo = document.getElementById('node-id').value;
    }

    data.id = document.getElementById('node-id').value;
    data.label=document.getElementById('node-title').value;
    data.title = document.getElementById('node-title').value;
    data.text = document.getElementById('node-text').value;
    nodes.push(data);
    clearPopUp();
    callback(data);
  }
  function saveDataEdge(data,callback) {
    data.id = document.getElementById('edge-id').value;
    data.label=document.getElementById('edge-title').value;
    data.title = document.getElementById('edge-title').value;
    data.text = document.getElementById('edge-text').value;
    edges.push(data);

    clearPopUpEdge();
    callback(data);
  }

  function guid() {
    function s4() {
      return Math.floor((1 + Math.random()) * 0x10000)
          .toString(16)
          .substring(1);
    }
    return s4() + s4() + '-' + s4() + '-' + s4() + '-' +
        s4() + '-' + s4() + s4() + s4();
  }

  function saveStory(){
    document.getElementById("nodesPre").innerHTML = JSON.stringify(nodes);
    document.getElementById("edgesPre").innerHTML = JSON.stringify(edges);
    console.log("----------------------------------------------------------");
    pasarAJSON2();
  }

  function pasarAJSON2(){
    var vertices = JSON.stringify(nodes);
    var aristas = JSON.stringify(edges);
    var storyIdentif = <%=@storyId%>;

    console.log("storyId");
    console.log(storyIdentif);
    console.log("-------------------------------------------");

    console.log("vertices");
    console.log(vertices);
    console.log("-------------------------------------------");

    console.log("aristas");
    console.log(aristas);
    console.log("-------------------------------------------");


    document.getElementById("aux_maker_nodes").setAttribute("value",vertices);
    document.getElementById("aux_maker_edges").setAttribute("value",aristas);
    document.getElementById("aux_maker_storyId").setAttribute("value",storyIdentif);

    $.ajax({
      type: 'GET',
      url: 'save',
    //  data: { <%=@aux_maker %>}
    });


  }

  function pasarAJSON(){
    console.log("Entra en pasarAJSON");
    var vertices = JSON.stringify(nodes);
    var aristas = JSON.stringify(edges);
    var storyIdentif = <%=@storyId%>;

    var arrVertices = vertices.split("{");

    var jsonFinal ="[";

    for(i=1;i<arrVertices.length;i++){
      var arrVertices2 = arrVertices[i].split("}");
      console.log("Arr["+i+"] = "+arrVertices2[0]);
      var valoresVertice = arrVertices2[0].split(",");
      var primerHijo=true;

      var json = '{"story_id":' + storyIdentif + ',"id":' + valoresVertice[0].split(":")[1] + ',"title":"' + valoresVertice[4].split(":")[1].trim() + '","body":"' + valoresVertice[5].split(":")[1].trim() +
          '","child_options":[';
      //console.log("json ==>  "+json);

      var arrAristas = aristas.split("{");

      for(x=1;x<arrAristas.length;x++) {
        var arrAristas2 = arrAristas[x].split("}");
        var valoresAristas = arrAristas2[0].split(",");

        if(valoresAristas[0].split(":")[1] == valoresVertice[0].split(":")[1]){
          if (primerHijo==true){
            json+='{"child_id":' + valoresAristas[1].split(":")[1] + ',"parent_id":' + valoresVertice[0].split(":")[1] + ',"option":"' + valoresAristas[4].split(":")[1] + '"}';
            primerHijo=false;
          }
          else {
            json+=',{"child_id":' + valoresAristas[1].split(":")[1] + ',"parent_id":' + valoresVertice[0].split(":")[1] + ',"option":"' + valoresAristas[4].split(":")[1] + '"}';
          }
        }
      }

      json+=']}';
      jsonFinal +=json;
    }
    jsonFinal+="]"
  }

</script>
<body onload="draw()">

<div id="network-popUp">
  <span id="operation">chapter</span> <br>
  <input id="node-id" value="new value" hidden />


  Título<input id="node-title" class="form-control" value="" />

  Texto<input id="node-text" value="" class="wysihtml5 form-control"/>
  <script type="text/javascript" charset="utf-8">
    $('#node-text').wysihtml5({'toolbar': { "fa": false ,'blockquote': false, 'html': false, "color": false, "image": false, "lists": false, "link": false}});
  </script>
  <input type="button" value="save" id="saveButton"/>
  <input type="button" value="cancel" id="cancelButton" />
</div>
<div id="network-popUpEdge">
  <span id="operationEdge">chapter</span> <br>
  <input id="edge-id" value="new value" hidden />


  Título<input id="edge-title" class="form-control" value="" />

  Texto<input id="edge-text" value="" class="wysihtml5 form-control"/>
  <script type="text/javascript" charset="utf-8">
    $('#edge-text').wysihtml5({'toolbar': { "fa": false ,'blockquote': false, 'html': false, "color": false, "image": false, "lists": false, "link": false}});
  </script>

  <input type="button" value="save" id="saveButtonEdge"/>
  <input type="button" value="cancel" id="cancelButtonEdge" />
</div>
<br />
<div id="mynetwork"></div>

<script>alert("La historia que se está editando es "+<%=@aux_maker.storyId%>)</script>

<button id="saveStoryId" name="saveStory" onclick="saveStory()">Save story</button>
<pre id="nodesPre"></pre>
<pre id="edgesPre"></pre>
<input hidden id="finalNodes" value=""/>
<input hidden id="finalEdges" value=""/>
<input hidden id="finalStoryId" value=""/>

</body>
</html>