<!-- Page passes the container for the graph to the program -->
<head>

  <style>
    #graphContainer{
      position:relative;
      overflow:auto;
      left:0px;
      bottom:0px;
      right:0px;
      width:100%;
      height:100%;
      border:solid 2px darkgrey;
      cursor:default;
    }
    #properties{
      border:  solid 2px darkgrey;
      padding: 10px;
    }
  </style>

  <!-- Sets the basepath for the library if not in same directory -->
  <script type="text/javascript">
    mxBasePath = '../src';
  </script>

  <!-- Loads and initializes the library -->
  <!--<script type="text/javascript" src="/assets/javascripts/mxClient.js"></script>-->
  <script type="text/javascript" src="../../assets/javascripts/widgEditor.js"></script>

  <!-- Example code -->
  <script type="text/javascript">

    // fuken: Esta funcion de jQuery carga la funcion main
    //        cuando el html ha sido cargado entero
    $(document).ready(function main() {
      var container = document.getElementById('graphContainer');
      // Checks if the browser is supported
      if (!mxClient.isBrowserSupported()) {
        // Displays an error message if the browser is not supported.
        mxUtils.error('Browser is not supported!', 200, false);
      }
      else {
        // Note that these XML nodes will be enclosing the
        // mxCell nodes for the model cells in the output

        // aqui se crea un xml para contener el grafo
        var xml = mxUtils.createXmlDocument();

        // aqui se crea el primer nodo xml
        var chapter1 = xml.createElement('Chapter');
        chapter1.setAttribute('title', 'Juanoide presenta');
        chapter1.setAttribute('body', 'Juan ha ido a ISPP');

        // aqui se crea el segundo nodo xml
        var chapter2 = xml.createElement('Chapter');
        chapter2.setAttribute('title', 'Juanoide pone la numeración');
        chapter2.setAttribute('body', 'Juanoide ha hecho las cosas bien');

        // aqui se crea el tercer nodo xml
        var chapter3 = xml.createElement('Chapter');
        chapter3.setAttribute('title', 'El grupo 1 se queja');
        chapter3.setAttribute('body', 'Buuuuu');

        // aqui se crea el cuarto nodo xml
        var chapter4 = xml.createElement('Chapter');
        chapter4.setAttribute('title', 'Juanoide no pone la numeración');
        chapter4.setAttribute('body', 'Juanoide no ha hecho las cosas bien');

        var relation = xml.createElement('sendTo');
        relation.setAttribute('since', '1985');

        // Creates the graph inside the given container
        var graph = new mxGraph(container);

        // fuken: sacar el objeto graph como propiedad global
        //        para poder verlo en la consola del navegador
        window.gr = graph;

        // ----- configuracion del grafo

        // Optional disabling of sizing
        graph.setCellsResizable(false);

        //Javi: No permite mover flechas
        graph.setAllowDanglingEdges(false);

        // Configures the graph contains to resize and
        // add a border at the bottom, right
        graph.setResizeContainer(true);
        graph.minimumContainerSize = new mxRectangle(0, 0, 500, 380);
        graph.setBorder(60);

        // Stops editing on enter key, handles escape
        new mxKeyHandler(graph);

        // Overrides method to disallow edge label editing
        graph.isCellEditable = function (cell) {
          return !this.getModel().isEdge(cell);
        };

        // Etiqueta que se muestra en el grafo (el titulo)
        graph.convertValueToString = function (cell) {
          if (mxUtils.isNode(cell.value)) {
            if (cell.value.nodeName.toLowerCase() == 'chapter') {
              var title = cell.getAttribute('title', '');
              var body  = cell.getAttribute('body', '');

              if (body != null && body.length > 0) {
                //return body + ', ' + title;
                return title;
              }

              return title;
            }
            else if (cell.value.nodeName.toLowerCase() == 'sendTo') {
              return cell.value.nodeName + ' (Since '
                  + cell.getAttribute('since', '') + ')';
            }

          }

          return '';
        };

        // Overrides method to store a cell label in the model
        var cellLabelChanged = graph.cellLabelChanged;
        graph.cellLabelChanged = function (cell, newValue, autoSize) {
          if (mxUtils.isNode(cell.value) &&
              cell.value.nodeName.toLowerCase() == 'chapter') {
            var pos = newValue.indexOf(' ');

            var title = (pos > 0) ? newValue.substring(0,pos)                    : newValue;
            var body  = (pos > 0) ? newValue.substring(pos + 1, newValue.length) : '';

            // Clones the value for correct undo/redo
            var elt = cell.value.cloneNode(true);

            elt.setAttribute('title', title);
            elt.setAttribute('body', body);

            newValue = elt;
            autoSize = true;
          }

          cellLabelChanged.apply(this, arguments);
        };

        // Overrides method to create the editing value
        var getEditingValue = graph.getEditingValue;
        graph.getEditingValue = function (cell) {
          if (mxUtils.isNode(cell.value) &&
              cell.value.nodeName.toLowerCase() == 'chapter') {
            var title = cell.getAttribute('title', '');
            var body = cell.getAttribute('body', '');

            return title + ' ' + body;
          }
        };

        // Adds a special tooltip for edges
        graph.setTooltips(true);

        var getTooltipForCell = graph.getTooltipForCell;
        graph.getTooltipForCell = function (cell) {
          // Adds some relation details for edges
          if (graph.getModel().isEdge(cell)) {
            var src = this.getLabel(this.getModel().getTerminal(cell, true));
            var trg = this.getLabel(this.getModel().getTerminal(cell, false));

            return src + ' ' + cell.value.nodeName + ' ' + trg;
          }

          return getTooltipForCell.apply(this, arguments);
        };

        // Enables rubberband selection
        //new mxRubberband(graph);

        // Adds an option to view the XML of the graph
        document.querySelector('#bodyCol').appendChild(mxUtils.button('View XML', function () {
          var encoder = new mxCodec();
          var node = encoder.encode(graph.getModel());
          mxUtils.popup(mxUtils.getPrettyXml(node), true);
        }));

        /* no me gustan los grafos plateados, me gustan los grafos azules, con el estilo por defecto

        // Changes the style for match the markup
        // Creates the default style for vertices
        var style = graph.getStylesheet().getDefaultVertexStyle();
        style[mxConstants.STYLE_STROKECOLOR] = 'gray';
        style[mxConstants.STYLE_ROUNDED] = true;
        style[mxConstants.STYLE_SHADOW] = true;
        style[mxConstants.STYLE_FILLCOLOR] = '#DFDFDF';
        style[mxConstants.STYLE_GRADIENTCOLOR] = 'white';
        style[mxConstants.STYLE_FONTCOLOR] = 'black';
        style[mxConstants.STYLE_FONTSIZE] = '12';
        style[mxConstants.STYLE_SPACING] = 4;

        */

        // Creates the default style for edges
        style = graph.getStylesheet().getDefaultEdgeStyle();
        //style[mxConstants.STYLE_STROKECOLOR] = '#0C0C0C';
        style[mxConstants.STYLE_LABEL_BACKGROUNDCOLOR] = 'white';
        style[mxConstants.STYLE_EDGE] = mxEdgeStyle.ElbowConnector;
        style[mxConstants.STYLE_ROUNDED] = true;
        //style[mxConstants.STYLE_FONTCOLOR] = 'black';
        style[mxConstants.STYLE_FONTSIZE] = '10';

        // Gets the default parent for inserting new cells. This
        // is normally the first child of the root (ie. layer 0).
        var parent = graph.getDefaultParent();

        // Adds cells to the model in a single step
        graph.getModel().beginUpdate();
        try {
          //var w = chapter1.getAttribute('title').length * 7;

          var v1 = graph.insertVertex(parent, null, chapter1, 40, 40, chapter1.getAttribute('title').length * 7, 30);
          var v2 = graph.insertVertex(parent, null, chapter2, 200, 150, chapter2.getAttribute('title').length * 7, 30);
          var v3 = graph.insertVertex(parent, null, chapter3, 450, 125, chapter3.getAttribute('title').length * 7, 30);
          var v4 = graph.insertVertex(parent, null, chapter4, 200, 100, chapter4.getAttribute('title').length * 7, 30);

          var e1 = graph.insertEdge(parent, null, relation, v1, v2);
          var e2 = graph.insertEdge(parent, null, relation, v2, v3);
          var e3 = graph.insertEdge(parent, null, relation, v1, v4);
          var e4 = graph.insertEdge(parent, null, relation, v4, v3);
        }
        finally {
          // Updates the display
          graph.getModel().endUpdate();
        }

        // Implements a properties panel that uses
        // mxCellAttributeChange to change properties
        graph.getSelectionModel().addListener(mxEvent.CHANGE, function (sender, evt) {
          selectionChanged(graph);
        });

        selectionChanged(graph);
      }

      /**
       * Updates the properties panel
       */
      function selectionChanged(graph) {
        //var div = document.getElementById('properties');

        // Forces focusout in IE
        graph.container.focus();

        // Clears the DIV the non-DOM way
        //div.innerHTML = '';

        // Gets the selection cell
        var cell = graph.getSelectionCell();

        if (cell == null) {
          //mxUtils.writeln(div, 'Nothing selected.');
          document.getElementById("my_textTitle").value = "Nothing selected";
          //document.getElementById("my_textBody").value = "Nothing selected 2";
        }
        else {

          var attrs = cell.value.attributes;

          for (var i = 0; i < attrs.length; i++) {
            if (i == 0) { //Obtains the title
              setFormTitleValue(attrs[i], cell, graph);
            } else { //Obtains the body
              var data = attrs[i];
              var titleValue = data.value;
              setFormBodyValue(data, cell, graph);
              widgEditor("my_textBody",titleValue);
            }
          }
        }
      }

      function setFormTitleValue(titleValue,cell,graph){
        document.getElementById("my_textTitle").value = titleValue.nodeValue;
        var inputTitle=document.getElementById("my_textTitle");

        //Check if the title value is different from the previous one and changes it
        var applyHandler = function () {
          var newValue = inputTitle.value || '';
          var oldValue = titleValue.nodeValue;

          if (newValue != oldValue) {
            graph.getModel().beginUpdate();
            try {
              var edit = new mxCellAttributeChange(
                  cell, titleValue.nodeName,
                  newValue);
              graph.getModel().execute(edit);
              graph.updateCellSize(cell);
            }
            finally {
              graph.getModel().endUpdate();
              graph=null;
            }
          }
        };

        mxEvent.addListener(inputTitle, 'keypress', function (evt) {
          // Needs to take shift into account for textareas
          if (evt.keyCode == /*enter*/13 && !mxEvent.isShiftDown(evt)) {
            inputTitle.blur();
          }
        });

        mxEvent.addListener(inputTitle, 'blur', applyHandler);

        //graph=null;
      }


      function setFormBodyValue(bodyValue,cell,graph) {
        document.getElementById("my_textBody").value = bodyValue.nodeValue;
        var inputBody = document.getElementById("my_textBody");

        //Check if the body value is different from the previous one and changes it

        var applyHandler = function () {
          var newValue = inputBody.value || '';
          var oldValue = bodyValue.nodeValue;


          if (newValue != oldValue) {
            graph.getModel().beginUpdate();
            try {
              var edit = new mxCellAttributeChange(
                  cell, bodyValue.nodeName,
                  newValue);
              graph.getModel().execute(edit);
              graph.updateCellSize(cell);
            }
            finally {
              graph.getModel().endUpdate();
              graph=null;
            }
          }
        };


        mxEvent.addListener(inputBody, 'keypress', function (evt) {
          // Needs to take shift into account for textareas
          if (evt.keyCode == /*enter*/13 && !mxEvent.isShiftDown(evt)) {
            inputBody.blur();
          }
        });

        if (mxClient.IS_IE) {
          mxEvent.addListener(inputBody, 'focusout', applyHandler);
        }
        else {
          // Note: Known problem is the blurring of fields in
          // Firefox by changing the selection, in which case
          // no event is fired in FF and the change is lost.
          // As a workaround you should use a local variable
          // that stores the focused field and invoke blur
          // explicitely where we do the graph.focus above.
          mxEvent.addListener(inputBody, 'blur', applyHandler);
        }

        //graph = null;

      }

    });
  </script>

  <script type="text/javascript">
    $(document).ready(function() {
      $("#buttonStory").on('click',function(){
        $("#modal").modal({
          show:true
        });
        $("#close").on('click',function(){
          $("#modal").modal('hide');
        });
      })
    })
  </script>

</head>



<body>


<table width="100%" height="100%" border="0" cellspacing="0" cellpadding="0">
  <tr>
    <!-- Panel lateral, se comenta porque no esta terminado
    <td id="toolbox" valign="top" width="70px" style="min-width:70px;background:#7F7F7F;padding:12px;">
      <img src="http://etc.usf.edu/clipart/40600/40690/pb_sq_40690_lg.gif" width="70px" height="70px"><br/>
      <img src="http://2.bp.blogspot.com/-MZAjo7HkgNE/TqUZQPShXQI/AAAAAAAAB9c/c5Xy3HBhk_g/s1600/GlobeCircle+copy.png" width="70px" height="70px"><br/>
    </td>
    -->
    <td>
      <div id="graphContainer">
      </div>
      <br>

      <div id="properties">

        <!--<input type="button" value="B" onclick=""/>-->
        <div id="container">
          <label for="noise">Title</label>
          <input type="text" id="my_textTitle" name="noise">
          <br/>
          <label for="noise">Body</label>

          <input id="my_textBody" name="noise" class="widgEditor nothing"/>
          <!--<textarea id="my_textBody" name="noise" class="widgEditor nothing"/>
          <input id="theTextarea" name="noise" class="widgEditor nothing"/>-->
          <br/>
        </div>
      </div>

    </td>
  </tr>
</table>



</body>
</html>