<div>
  <%= stylesheet_link_tag 'vis' %>
  <style>
    #graph_edit{
      width: 100%;
      height: 400px;
      border: 1px solid lightgrey;
    }
    #graph_popup{
      border: 2px solid darkgreen;
      padding-bottom: 1.5em;
      position: absolute;
      z-index: 300;
      display: none;
    }
    .show-on-edge-select, .show-on-node-select{
      display: none;
    }
    #maker-controls .glyphicon{
      font-size: 1em !important;
    }

  </style>

  <div id="maker-controls" class="btn-group">
    <button class="btn btn-default" onclick="grafo.addNodeMode()">
      <span title="añadir" class="glyphicon glyphicon-plus"></span> Añadir nodo
    </button>
    <button class="btn btn-default" onclick="grafo.addEdgeMode()">
      <span title="" class="glyphicon glyphicon-resize-small"></span> Añadir arista
    </button>
    <button class="show-on-node-select btn btn-default">
      <span class="glyphicon glyphicon-pencil"></span> Editar texto del nodo
    </button>
    <button class="show-on-edge-select btn btn-default">
      <span class="glyphicon glyphicon-pencil"></span> Editar texto de la arista
    </button>
    <button class="show-on-edge-select btn btn-default">
      <span class="glyphicon glyphicon-link"></span> Editar conexiones de la arista
    </button>
    <button class="show-on-edge-select show-on-node-select btn btn-default">
      <span class="glyphicon glyphicon-remove"></span> Borrar
    </button>
  </div>

  <div id="graph_popup" class="col-sm-4 col-sm-offset-4">
    <h3 class="text-center" id="popup-header">Popup</h3>

    <label for="popup-id">Id: </label>
    <input type="text" value="" id="popup-id" class="form-control">

    <label for="popup-title">Title: </label>
    <input type="text" value="" id="popup-title" class="form-control">
    <br>
    <button id="popup-save"   class="btn btn-primary">Guardar</button>
    <button id="popup-cancel" class="btn btn-default">Cancelar</button>
  </div>
  <div id="graph_edit"></div>
  <script type="text/javascript" charset="utf-8">
    var story_id  = <%= @id %>;
    var container = $("#graph_edit")[0];
    var $popup    = $("#graph_popup"); // popup jquery elem
    var popup     = $popup[0]; // popup html elem

    // title of the popup
    var popup_header = $popup.find("#popup-header");
    // value of inputs
    var popup_id     = $popup.find("#popup-id");
    var popup_title  = $popup.find("#popup-title");

    // popup buttons
    var popup_save_btn   = $popup.find("#popup-save");
    var popup_cancel_btn = $popup.find("#popup-cancel");

    var show_on_edge = $(".show-on-edge-select");
    var show_on_node = $(".show-on-node-select");

    var db_chapters = [];

    var vis_nodes = [];
    var vis_edges = [];
    var grafo = null;

    $.get("/stories/"+story_id+".json", function(story){
      var ch_ids = story.chapter_ids;
      //console.log("Maker: story from db "+JSON.stringify(story));
      var chapters_parsed = 0;
      if(!ch_ids.length){
        iniciaGrafo();
      }
      ch_ids.forEach(function(ch_id){
        $.get("/chapters/"+ch_id+".json", function(chapter){
          db_chapters.push(chapter);
          chapters_parsed++;
          //console.log("Maker: node from db "+JSON.stringify(chapter));
          if(chapters_parsed === ch_ids.length){
            iniciaGrafo();
          }
        });
      });
    });

    function parsearNodos(){
      console.log("Maker: loading nodes from db");
      db_chapters.forEach(function(chapter){
        var vis_node = {
          label: chapter.title,
          title: chapter.body,
          id: chapter.id
        };
        vis_nodes.push(vis_node);
      });
      /*vis_nodes.forEach(function(node) {
        console.log("Maker: parsed node "+JSON.stringify(node));
      })*/
    }
    function parsearAristas(){
      console.log("Maker: loading edges from db");
      db_chapters.forEach(function(chapter){
        var options = chapter.child_options;
        options.forEach(function(option){
          var vis_edge = {
            from: option.parent_id,
            to: option.child_id,
            label: option.option,
            title: option.option,
            id: option.id
          };
          vis_edges.push(vis_edge);
        });
      });
    }

    function iniciaGrafo(){
      parsearNodos();
      parsearAristas();

      var vis_data = { edges: vis_edges, nodes: vis_nodes };

      //  vis.Network(container, data, options)
      //    container es un elemento html
      //    data es un objeto con las propiedades nodes y edges
      grafo = new vis.Network(container, vis_data, vis_options);

      grafo.on("selectNode", onSelectNode);
      grafo.on("deselectNode", onDeselectNode);

      grafo.on("selectEdge", onSelectEdge);
      grafo.on("deselectEdge", onDeselectEdge);
    }

    function onSelectNode(data){
      show_on_node.show();
    }
    function onDeselectNode(data){
      show_on_node.hide();
    }
    function onSelectEdge(data){
      if(!data.nodes.length) show_on_edge.show();
    }
    function onDeselectEdge(data){
      show_on_edge.hide();
    }

    // create an array with edges
    /*var edges = new vis.DataSet([
      {from: 1, to: 3, label: "celebracion larga", title: "Lo vemos morir y nos quedamos mucho tiempo celebrando"},
      {from: 1, to: 2, label: "celebracion corta", title: "Lo vemos y nos quedamos un rato celebrando"},
      {from: 2, to: 4, label: "vamos a una pizzeria", title: "Nos encontramos al gordo de ispp"},
      {from: 2, to: 5, label: "vamos al LSI", title: "Nos encontramos a tito corchu"}
    ]);*/

    var vis_options = {
      interaction: {
        navigationButtons: true,
        hover: true
      },
      layout: {
        // asegura que el grafo tenga el mismo layout
        // mientras no se regargue la libreria vis.js en la pagina
        randomSeed: 2
      },
      manipulation: { // solo queremos mostrar el boton "back" y las descripciones
        initiallyActive: true,
        addNode:    false,
        editNode:   false,
        deleteNode: false,
        addEdge:    false,
        editEdge:   false,
        deleteEdge: false
      },
      nodes: {
        // shape: "forma del nodo",
        color: {
          hover: {
            border: "red",
            background: "orange"
          }
        }
      },
      edges: {
        arrows: {
          to: {
            enabled: true,
            scaleFactor: 0.5
          }
        }
      }
    };

    // esta funcion se llama al pulsar sobre "Add node"
    function onAddNode(data, callback){
      popup_header.text("Añadir nodo");
      popup_id.val(data.id);
      popup_title.val(data.label);
      popup_save_btn.on("click", onSave.bind(this, data, callback));
      popup_cancel_btn.on("click", clearPopup.bind());
      $popup.css("display", "block");
    }
    // esta funcion se llama al pulsar sobre "Edit node"
    function onEditNode(data, callback){
      popup_header.text("Editar nodo");
      popup_id.val(data.id);
      popup_title.val(data.label);
      popup_save_btn.on("click", onSave.bind(this, data, callback));
      popup_cancel_btn.on("click", onCancel.bind(this, callback));
      $popup.css("display", "block");
    }
    /* esta funcion se llama al pulsar sobre "Delete selected"
     * cuando un nodo esta seleccionado
     * recibe un callback y un objeto data
     * con las propiedades nodes y edges
     * indicando los ids de las aristas o nodos borrados
     * */
    function onDelete(data, callback){
      /* el metodo .join se llama sobre un array de strings
       * para unirlas en una sola string uniendolas con el parametro pasado
       * */
      if(data.nodes.length) console.log("se borraron los nodos "+data.nodes.join(", "));
      if(data.edges.length) console.log("se borraron las aristas "+data.edges.join(", "));
      callback(data);
    }
    function onAddEdge(data, callback){
      if(data.from == data.to){
        var respuesta = confirm("¿Quieres conectar el nodo consigo mismo?");
        if (respuesta == true) callback(data);
      }else{
        callback(data);
      }
    }
    function onEditEdge(data, callback){
      console.log("Maker: editing edge "+JSON.stringify(data));
      console.log("Maker: edges "+JSON.stringify(vis_edges));

      var edge = grafo.body.data.edges.get(data.id);

      if(edge){
        data.label = edge.label;
        data.title = edge.title;
      }else{
        console.log("Maker: no se encontro la arista con id "+id);
      }

      // true por defecto
      // solo interesa que sea false cuando el usuario pulse "no" el confirm()
      var dialog_confirm = true;

      if(data.from == data.to){
        dialog_confirm = confirm("¿Quieres conectar el nodo consigo mismo?");
      }

      if(dialog_confirm){
        popup_header.text("Editar arista");
        popup_id.val(data.id);
        popup_title.val(data.label || "");
        popup_save_btn.on("click", onSave.bind(this, data, callback));
        //popup_cancel_btn.on("click", onCancel.bind(this, callback));
        popup_cancel_btn.on("click", clearPopup.bind());
        $popup.css("display", "block");
      }else{
        callback(null);
      }

    }

    function clearPopup(){
      popup_save_btn.off("click");
      popup_cancel_btn.off("click");
      $popup.css("display", "none");
    }
    function onCancel(callback){
      clearPopup();
      callback(null);
    }
    function onSave(data, callback){
      data.id = popup_id.val();
      data.label = popup_title.val();
      clearPopup();
      callback(data);
    }

  </script>
</div>